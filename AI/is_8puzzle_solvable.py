# -*- coding: utf-8 -*-
"""is_8puzzle_solvable.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/108kUXedi0FWY_RyhfCz703Sk7tx2uFVb
"""

# counting inversions
def getInvCount(arr):
    inv_count = 0
    empty_value = 0
    for i in range(0, 9):
        for j in range(i + 1, 9):
            if arr[j] != empty_value and arr[i] != empty_value and arr[i] > arr[j]:
                inv_count += 1
    return inv_count
 
# This function returns true if goal state is reachable
def is_Reachable(goal_state, initial_state) :
  # Count inversions in given puzzle
  inv_count_g = getInvCount(goal_state)
  inv_count_i = getInvCount(initial_state)

  print(inv_count_g)
  print(inv_count_i)
      
  if ((inv_count_g % 2 == 0 and inv_count_i % 2 == 0) or (inv_count_g % 2 != 0 and inv_count_i % 2 != 0)):
    return 1
  else:
    return 0
      

goal_state =[1, 2, 3,
              4, 5, 6,
              7, 8, 0]

init_state = [1, 8, 2, 
              0, 4, 3, 
              7, 6, 5]

if(is_Reachable(goal_state, init_state)) :
    print("Reachable")
else :
    print("Not Reachable")